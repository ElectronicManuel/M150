/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Digimantec
 * This is an API for a digimantec 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface CheckoutConfirmation
 */
export interface CheckoutConfirmation {
    /**
     * Total amount paid
     * @type {number}
     * @memberof CheckoutConfirmation
     */
    total?: number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof CheckoutConfirmation
     */
    products?: Array<Product>;
}

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    imageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price?: number;
}

/**
 * 
 * @export
 * @interface ShoppingCart
 */
export interface ShoppingCart extends Array<ShoppingCartItem> {
}

/**
 * 
 * @export
 * @interface ShoppingCartItem
 */
export interface ShoppingCartItem {
    /**
     * 
     * @type {number}
     * @memberof ShoppingCartItem
     */
    amount?: number;
    /**
     * 
     * @type {Product}
     * @memberof ShoppingCartItem
     */
    product?: Product;
}


/**
 * ProductsApi - fetch parameter creator
 * @export
 */
export const ProductsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new product to the store
         * @param {string} idToken 
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(idToken: string, body: Product, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling addProduct.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addProduct.');
            }
            const localVarPath = `/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Product" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a product
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(idToken: string, productId: string, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling deleteProduct.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProduct.');
            }
            const localVarPath = `/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single product
         * @summary Find product by ID
         * @param {string} productId ID of product to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(productId: string, options: any = {}): FetchArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling getProductById.');
            }
            const localVarPath = `/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(options: any = {}): FetchArgs {
            const localVarPath = `/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a product in the store
         * @param {string} idToken 
         * @param {string} productId ID of product that needs to be updated
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(idToken: string, productId: string, body: Product, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling updateProduct.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProduct.');
            }
            const localVarPath = `/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Product" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new product to the store
         * @param {string} idToken 
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(idToken: string, body: Product, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).addProduct(idToken, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a product
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(idToken: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).deleteProduct(idToken, productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a single product
         * @summary Find product by ID
         * @param {string} productId ID of product to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).getProductById(productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Product>> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).listProducts(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates a product in the store
         * @param {string} idToken 
         * @param {string} productId ID of product that needs to be updated
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(idToken: string, productId: string, body: Product, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ProductsApiFetchParamCreator(configuration).updateProduct(idToken, productId, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new product to the store
         * @param {string} idToken 
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(idToken: string, body: Product, options?: any) {
            return ProductsApiFp(configuration).addProduct(idToken, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a product
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(idToken: string, productId: string, options?: any) {
            return ProductsApiFp(configuration).deleteProduct(idToken, productId, options)(fetch, basePath);
        },
        /**
         * Returns a single product
         * @summary Find product by ID
         * @param {string} productId ID of product to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(productId: string, options?: any) {
            return ProductsApiFp(configuration).getProductById(productId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(options?: any) {
            return ProductsApiFp(configuration).listProducts(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates a product in the store
         * @param {string} idToken 
         * @param {string} productId ID of product that needs to be updated
         * @param {Product} body Product object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(idToken: string, productId: string, body: Product, options?: any) {
            return ProductsApiFp(configuration).updateProduct(idToken, productId, body, options)(fetch, basePath);
        },
    };
};

/**
 * ProductsApi - interface
 * @export
 * @interface ProductsApi
 */
export interface ProductsApiInterface {
    /**
     * 
     * @summary Add a new product to the store
     * @param {string} idToken 
     * @param {Product} body Product object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    addProduct(idToken: string, body: Product, options?: any): Promise<Product>;

    /**
     * 
     * @summary Deletes a product
     * @param {string} idToken 
     * @param {string} productId Product id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    deleteProduct(idToken: string, productId: string, options?: any): Promise<Product>;

    /**
     * Returns a single product
     * @summary Find product by ID
     * @param {string} productId ID of product to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductById(productId: string, options?: any): Promise<Product>;

    /**
     * 
     * @summary List products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    listProducts(options?: any): Promise<Array<Product>>;

    /**
     * 
     * @summary Updates a product in the store
     * @param {string} idToken 
     * @param {string} productId ID of product that needs to be updated
     * @param {Product} body Product object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProduct(idToken: string, productId: string, body: Product, options?: any): Promise<Product>;

}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI implements ProductsApiInterface {
    /**
     * 
     * @summary Add a new product to the store
     * @param {string} idToken 
     * @param {Product} body Product object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public addProduct(idToken: string, body: Product, options?: any) {
        return ProductsApiFp(this.configuration).addProduct(idToken, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a product
     * @param {string} idToken 
     * @param {string} productId Product id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public deleteProduct(idToken: string, productId: string, options?: any) {
        return ProductsApiFp(this.configuration).deleteProduct(idToken, productId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a single product
     * @summary Find product by ID
     * @param {string} productId ID of product to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProductById(productId: string, options?: any) {
        return ProductsApiFp(this.configuration).getProductById(productId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public listProducts(options?: any) {
        return ProductsApiFp(this.configuration).listProducts(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates a product in the store
     * @param {string} idToken 
     * @param {string} productId ID of product that needs to be updated
     * @param {Product} body Product object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public updateProduct(idToken: string, productId: string, body: Product, options?: any) {
        return ProductsApiFp(this.configuration).updateProduct(idToken, productId, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ShoppingCartApi - fetch parameter creator
 * @export
 */
export const ShoppingCartApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds a product to the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id that needs to be added to the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShoppingCart(idToken: string, productId: string, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling addToShoppingCart.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling addToShoppingCart.');
            }
            const localVarPath = `/shopping_cart/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks a cart out
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutCart(idToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling checkoutCart.');
            }
            const localVarPath = `/checkout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a product from the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductFromCart(idToken: string, productId: string, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling deleteProductFromCart.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling deleteProductFromCart.');
            }
            const localVarPath = `/shopping_cart/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shopping cart of a user
         * @summary Get shopping cart for user
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingCart(idToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'idToken' is not null or undefined
            if (idToken === null || idToken === undefined) {
                throw new RequiredError('idToken','Required parameter idToken was null or undefined when calling getShoppingCart.');
            }
            const localVarPath = `/shopping_cart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idToken !== undefined && idToken !== null) {
                localVarHeaderParameter['id_token'] = String(idToken);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingCartApi - functional programming interface
 * @export
 */
export const ShoppingCartApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds a product to the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id that needs to be added to the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShoppingCart(idToken: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ShoppingCartApiFetchParamCreator(configuration).addToShoppingCart(idToken, productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Checks a cart out
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutCart(idToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckoutConfirmation> {
            const localVarFetchArgs = ShoppingCartApiFetchParamCreator(configuration).checkoutCart(idToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Deletes a product from the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductFromCart(idToken: string, productId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ShoppingCartApiFetchParamCreator(configuration).deleteProductFromCart(idToken, productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the shopping cart of a user
         * @summary Get shopping cart for user
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingCart(idToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ShoppingCart> {
            const localVarFetchArgs = ShoppingCartApiFetchParamCreator(configuration).getShoppingCart(idToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ShoppingCartApi - factory interface
 * @export
 */
export const ShoppingCartApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Adds a product to the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id that needs to be added to the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToShoppingCart(idToken: string, productId: string, options?: any) {
            return ShoppingCartApiFp(configuration).addToShoppingCart(idToken, productId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Checks a cart out
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutCart(idToken: string, options?: any) {
            return ShoppingCartApiFp(configuration).checkoutCart(idToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Deletes a product from the shopping cart
         * @param {string} idToken 
         * @param {string} productId Product id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductFromCart(idToken: string, productId: string, options?: any) {
            return ShoppingCartApiFp(configuration).deleteProductFromCart(idToken, productId, options)(fetch, basePath);
        },
        /**
         * Returns the shopping cart of a user
         * @summary Get shopping cart for user
         * @param {string} idToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingCart(idToken: string, options?: any) {
            return ShoppingCartApiFp(configuration).getShoppingCart(idToken, options)(fetch, basePath);
        },
    };
};

/**
 * ShoppingCartApi - interface
 * @export
 * @interface ShoppingCartApi
 */
export interface ShoppingCartApiInterface {
    /**
     * 
     * @summary Adds a product to the shopping cart
     * @param {string} idToken 
     * @param {string} productId Product id that needs to be added to the cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    addToShoppingCart(idToken: string, productId: string, options?: any): Promise<Product>;

    /**
     * 
     * @summary Checks a cart out
     * @param {string} idToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    checkoutCart(idToken: string, options?: any): Promise<CheckoutConfirmation>;

    /**
     * 
     * @summary Deletes a product from the shopping cart
     * @param {string} idToken 
     * @param {string} productId Product id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    deleteProductFromCart(idToken: string, productId: string, options?: any): Promise<Product>;

    /**
     * Returns the shopping cart of a user
     * @summary Get shopping cart for user
     * @param {string} idToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApiInterface
     */
    getShoppingCart(idToken: string, options?: any): Promise<ShoppingCart>;

}

/**
 * ShoppingCartApi - object-oriented interface
 * @export
 * @class ShoppingCartApi
 * @extends {BaseAPI}
 */
export class ShoppingCartApi extends BaseAPI implements ShoppingCartApiInterface {
    /**
     * 
     * @summary Adds a product to the shopping cart
     * @param {string} idToken 
     * @param {string} productId Product id that needs to be added to the cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public addToShoppingCart(idToken: string, productId: string, options?: any) {
        return ShoppingCartApiFp(this.configuration).addToShoppingCart(idToken, productId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Checks a cart out
     * @param {string} idToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public checkoutCart(idToken: string, options?: any) {
        return ShoppingCartApiFp(this.configuration).checkoutCart(idToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Deletes a product from the shopping cart
     * @param {string} idToken 
     * @param {string} productId Product id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public deleteProductFromCart(idToken: string, productId: string, options?: any) {
        return ShoppingCartApiFp(this.configuration).deleteProductFromCart(idToken, productId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the shopping cart of a user
     * @summary Get shopping cart for user
     * @param {string} idToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingCartApi
     */
    public getShoppingCart(idToken: string, options?: any) {
        return ShoppingCartApiFp(this.configuration).getShoppingCart(idToken, options)(this.fetch, this.basePath);
    }

}